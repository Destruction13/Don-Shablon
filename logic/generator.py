from datetime import datetime
import random

from PySide6.QtWidgets import (
    QWidget,
    QLabel,
    QLineEdit,
    QComboBox,
    QHBoxLayout,
    QVBoxLayout,
    QPushButton,
    QDateEdit,
    QToolButton,
    QFormLayout,
    QMessageBox,
    QCheckBox,
    QGroupBox,
    QApplication,
)

try:
    from PySide6.QtCore import QDate, Qt, QTime, QTimer, QEvent
    from PySide6.QtGui import QKeyEvent
except Exception:

    class QDate:
        def __init__(self, *args, **kwargs):
            pass

    class QTime:
        def __init__(self, h=0, m=0):
            self._h = h
            self._m = m

    class Qt:
        NoFocus = 0
        Key_F4 = 0

    class QEvent:
        MouseButtonPress = 0

    class QKeyEvent:
        def __init__(self, *args, **kwargs):
            pass

    class QTimer:
        @staticmethod
        def singleShot(msec, func):
            func()


from logic.room_filter import FilteringComboBox

from logic.app_state import UIContext
from constants import rooms_by_bz
from logic.utils import (
    format_date_ru,
    parse_yandex_calendar_url,
    copy_generated_text,
)
from gui.animations import setup_animation
from gui import ToggleSwitch
from logic.templates import OTHER_TEMPLATES, generate_from_category

ICON_MAP = {
    "–ò–º—è": "üßë\u200düíº",
    "–°—Å—ã–ª–∫–∞": "üîó",
    "–î–∞—Ç–∞": "üìÖ",
    "–í—Ä–µ–º—è": "‚è∞",
    "–ë–¶": "üè¢",
    "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞": "üí¨",
    "–¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏": "üìå",
    "–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏": "üìù",
}

HELP_TEXTS = {
    "name": "–ò–º—è —á–µ–ª–æ–≤–µ–∫–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è —Å –≤–æ–ø—Ä–æ—Å–æ–º. –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
    "link": "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
    "datetime": "–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏. –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
    "start_time": "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏. –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
    "bz": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ë–¶. –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
    "room": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π. –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ë–¶.",
    "regular": "–í—ã–±–æ—Ä —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á–∏",
    "his_room": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π —á–µ–ª–æ–≤–µ–∫–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–±—Ä–∞—â–∞–µ–º—Å—è. –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
    "my_room": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞ –æ–±–º–µ–Ω. –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é.",
    "meeting_name": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏. –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é.",
    "duration": "–í—ã–±–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á–∏",
    "client_name": "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—Ä—Ç—É—Ä–∞ –ü–∏—Ä–æ–∂–∫–æ–≤–∞, –°–∏–Ω—É—Å–∞ –ö–æ—Å–∏–Ω–æ–≤–∞, –¢–∞–Ω–≥–µ–Ω—Å–∞ –ö–∞—Ç–∞–Ω–≥–µ–Ω—Å–æ–≤–∞)",
    "reg_count": "–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å—Ç—Ä–µ—á (–ü—Ä–∏–º–µ—Ä: 1 —Ä–∞–∑, 2 —Ä–∞–∑–∞, 3 —Ä–∞–∑–∞, 4 —Ä–∞–∑–∞)",
    "reg_period": "–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ (–ü—Ä–∏–º–µ—Ä: —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, —Ä–∞–∑ –≤ –º–µ—Å—è—Ü)",
    "reg_day": "–í—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ (–ü—Ä–∏–º–µ—Ä: –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º, –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º)",
}


def add_help_icon(label: QLabel, help_text: str, ctx: UIContext) -> QWidget:
    """–í–µ—Ä–Ω—É—Ç—å –≤–∏–¥–∂–µ—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞."""
    if not getattr(ctx, "show_help_icons", True):
        return label

    container = QWidget()
    hl = QHBoxLayout(container)
    hl.setContentsMargins(0, 0, 0, 0)
    hl.addWidget(label)
    btn = QToolButton()
    btn.setText("‚ùî")
    btn.setToolTip(help_text)
    hl.addWidget(btn)
    return container


def label_with_icon(text: str) -> QLabel:
    """–°–æ–∑–¥–∞—Ç—å QLabel —Å –∏–∫–æ–Ω–∫–æ–π-—ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞."""
    base = text.rstrip(":")
    emoji = None
    for key, ico in ICON_MAP.items():
        if base.startswith(key):
            emoji = ico
            break
    if emoji:
        return QLabel(f"{emoji} {text}")
    return QLabel(text)


class ClickableDateEdit(QDateEdit):
    """–ü–æ–ª–µ –¥–∞—Ç—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""

    def __init__(self, parent=None):
        super().__init__(parent)
        
        self.setCalendarPopup(True)
        self.lineEdit().installEventFilter(self)

    def _open_calendar(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""

        def trigger():
            evt = QKeyEvent(QEvent.KeyPress, Qt.Key_F4, Qt.NoModifier)
            QApplication.postEvent(self, evt)

        QTimer.singleShot(0, trigger)

    def eventFilter(self, obj, event):
        if obj == self.lineEdit() and event.type() == QEvent.MouseButtonPress:
            self._open_calendar()
        return super().eventFilter(obj, event)

    def mousePressEvent(self, event):
        super().mousePressEvent(event)
        self._open_calendar()

    def focusInEvent(self, event):
        super().focusInEvent(event)
        self._open_calendar()


class TimeInput(QLineEdit):
    """–ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setInputMask("00:00")
        self.setText("08:00")

    def time(self) -> QTime:
        return QTime.fromString(self.text(), "HH:mm")

    def setTime(self, t: QTime):
        self.setText(t.toString("HH:mm"))

    def focusInEvent(self, event):
        super().focusInEvent(event)
        self.selectAll()


def clear_layout(layout):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–∏ –∏–∑ –º–∞–∫–µ—Ç–∞."""
    while layout.count():
        item = layout.takeAt(0)
        if item.layout():
            clear_layout(item.layout())
        widget = item.widget()
        if widget:
            widget.deleteLater()


def add_field(
    label: str,
    name: str,
    ctx: UIContext,
    builtin_clear: bool = False,
    help_text: str | None = None,
):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤ —Ñ–æ—Ä–º—É –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ."""
    edit = QLineEdit()
    if builtin_clear:
        try:
            edit.setClearButtonEnabled(True)
        except Exception:
            pass
    container = QWidget()
    hl = QHBoxLayout(container)
    hl.setContentsMargins(0, 0, 0, 0)
    hl.addWidget(edit)
    ctx.fields[name] = edit
    ctx.field_containers[name] = container
    lab = label_with_icon(label)
    ctx.labels[name] = lab
    label_widget = add_help_icon(lab, help_text, ctx) if help_text else lab
    ctx.fields_layout.addRow(label_widget, container)
    setup_animation(edit, ctx)
    if name == "link":
        edit.textChanged.connect(lambda _: on_link_change(ctx))


def add_name_field(ctx: UIContext, help_text: str | None = None):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    edit = QLineEdit()
    container = QWidget()
    hl = QHBoxLayout(container)
    hl.setContentsMargins(0, 0, 0, 0)
    hl.addWidget(edit)
    ctx.fields["name"] = edit
    ctx.field_containers["name"] = container
    lab = label_with_icon("–ò–º—è:")
    ctx.labels["name"] = lab
    label_widget = add_help_icon(lab, help_text, ctx) if help_text else lab
    ctx.fields_layout.addRow(label_widget, container)
    setup_animation(edit, ctx)


def add_checkbox(label: str, name: str, ctx: UIContext):
    """–°–æ–∑–¥–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–∂–æ–∫."""
    cb = QCheckBox(label)
    ctx.fields[name] = cb
    ctx.field_containers[name] = cb
    ctx.fields_layout.addRow(cb)
    setup_animation(cb, ctx)
    return cb


def add_combo(
    label: str,
    name: str,
    values: list[str],
    ctx: UIContext,
    help_text: str | None = None,
):
    """–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
    combo = QComboBox()
    combo.addItems(values)
    ctx.fields[name] = combo
    lab = label_with_icon(label)
    ctx.labels[name] = lab
    label_widget = add_help_icon(lab, help_text, ctx) if help_text else lab
    ctx.fields_layout.addRow(label_widget, combo)
    setup_animation(combo, ctx)


def add_room_field(
    label: str,
    name: str,
    bz_name: str,
    ctx: UIContext,
    help_text: str | None = None,
):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π —Å –æ—á–∏—Å—Ç–∫–æ–π."""
    container = QWidget()
    hl = QHBoxLayout(container)
    hl.setContentsMargins(0, 0, 0, 0)
    combo = FilteringComboBox()

    def update_rooms():
        bz = ctx.fields.get(bz_name).currentText() if bz_name in ctx.fields else ""
        rooms = rooms_by_bz.get(bz, [])
        combo.set_items(rooms)

    if bz_name in ctx.fields:
        ctx.fields[bz_name].currentTextChanged.connect(update_rooms)
    update_rooms()

    hl.addWidget(combo)
    btn = QToolButton()
    btn.setText("‚úñ")
    btn.setFocusPolicy(Qt.NoFocus)
    btn.clicked.connect(lambda: combo.setEditText(""))
    hl.addWidget(btn)
    ctx.fields[name] = combo
    lab = label_with_icon(label)
    ctx.labels[name] = lab
    label_widget = add_help_icon(lab, help_text, ctx) if help_text else lab
    ctx.fields_layout.addRow(label_widget, container)
    setup_animation(combo, ctx)
    setup_animation(btn, ctx)


def add_date(name: str, ctx: UIContext, help_text: str | None = None):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    date_edit = ClickableDateEdit()
    date_edit.setCalendarPopup(True)
    date_edit.setDisplayFormat("dd.MM.yyyy")
    date_edit.setDate(QDate.currentDate())
    ctx.fields[name] = date_edit
    lab = label_with_icon("–î–∞—Ç–∞:")
    ctx.labels[name] = lab
    label_widget = add_help_icon(lab, help_text, ctx) if help_text else lab
    ctx.fields_layout.addRow(label_widget, date_edit)
    setup_animation(date_edit, ctx)


def add_time_range(
    start_name: str,
    end_name: str,
    ctx: UIContext,
    help_text: str | None = None,
):
    """–î–æ–±–∞–≤–∏—Ç—å –¥–≤–∞ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞."""
    start_edit = TimeInput()
    end_edit = TimeInput()
    start_edit.setTime(QTime(8, 0))
    end_edit.setTime(QTime(8, 30))

    container = QWidget()
    hl = QHBoxLayout(container)
    hl.setContentsMargins(0, 0, 0, 0)
    hl.addWidget(QLabel("\u23f1\ufe0f \u0441"))
    hl.addWidget(start_edit)
    hl.addWidget(QLabel("\u0434\u043e"))
    hl.addWidget(end_edit)

    ctx.fields[start_name] = start_edit
    ctx.fields[end_name] = end_edit
    lab = label_with_icon("–í—Ä–µ–º—è:")
    ctx.labels[start_name] = lab
    label_widget = add_help_icon(lab, help_text, ctx) if help_text else lab
    ctx.fields_layout.addRow(label_widget, container)
    setup_animation(start_edit, ctx)
    setup_animation(end_edit, ctx)

    def on_start_changed():
        st = start_edit.time()
        et = end_edit.time()
        new_end = st.addSecs(30 * 60)
        if not et.isValid() or et <= st:
            end_edit.setTime(new_end)

    def on_end_changed():
        st = start_edit.time()
        et = end_edit.time()
        if et <= st:
            end_edit.setTime(st.addSecs(30 * 60))

    start_edit.editingFinished.connect(on_start_changed)
    end_edit.editingFinished.connect(on_end_changed)


def number_to_words(n: int) -> str:
    """–í–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–µ—Å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5."""
    return {
        1: "–æ–¥–∏–Ω",
        2: "–¥–≤–∞",
        3: "—Ç—Ä–∏",
        4: "—á–µ—Ç—ã—Ä–µ",
        5: "–ø—è—Ç—å",
    }.get(n, str(n))


def plural_raz(n: int) -> str:
    """–°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '—Ä–∞–∑' –ø–æ —á–∏—Å–ª—É."""
    if n == 1:
        return "—Ä–∞–∑"
    elif 2 <= n <= 4:
        return "—Ä–∞–∑–∞"
    else:
        return "—Ä–∞–∑"


def weekday_to_plural(word: str) -> str:
    """–í–µ—Ä–Ω—É—Ç—å —Ñ–æ—Ä–º—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ."""
    mapping = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º",
        "–≤—Ç–æ—Ä–Ω–∏–∫": "–≤—Ç–æ—Ä–Ω–∏–∫–∞–º",
        "—Å—Ä–µ–¥–∞": "—Å—Ä–µ–¥–∞–º",
        "—á–µ—Ç–≤–µ—Ä–≥": "—á–µ—Ç–≤–µ—Ä–≥–∞–º",
        "–ø—è—Ç–Ω–∏—Ü–∞": "–ø—è—Ç–Ω–∏—Ü–∞–º",
        "—Å—É–±–±–æ—Ç–∞": "—Å—É–±–±–æ—Ç–∞–º",
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º",
    }
    return mapping.get(word.lower(), word)


def update_fields(ctx: UIContext):
    """–ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    clear_layout(ctx.fields_layout)
    ctx.fields.clear()
    ctx.labels.clear()
    ctx.field_containers.clear()
    typ = ctx.type_combo.currentText()

    if typ == "–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è":
        add_name_field(ctx, HELP_TEXTS["name"])
        add_field(
            "–°—Å—ã–ª–∫–∞:", "link", ctx, builtin_clear=True, help_text=HELP_TEXTS["link"]
        )
        add_date("datetime", ctx, help_text=HELP_TEXTS["datetime"])
        add_time_range(
            "start_time", "end_time", ctx, help_text=HELP_TEXTS["start_time"]
        )
        add_combo(
            "–ë–¶:", "bz", list(rooms_by_bz.keys()), ctx, help_text=HELP_TEXTS["bz"]
        )
        add_room_field("–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞:", "room", "bz", ctx, help_text=HELP_TEXTS["room"])
        add_combo(
            "–¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏:",
            "regular",
            ["–û–±—ã—á–Ω–∞—è", "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"],
            ctx,
            help_text=HELP_TEXTS["regular"],
        )
    elif typ == "–û–±–º–µ–Ω":
        add_name_field(ctx, HELP_TEXTS["name"])
        add_field(
            "–°—Å—ã–ª–∫–∞:", "link", ctx, builtin_clear=True, help_text=HELP_TEXTS["link"]
        )
        add_date("datetime", ctx, help_text=HELP_TEXTS["datetime"])
        add_time_range(
            "start_time", "end_time", ctx, help_text=HELP_TEXTS["start_time"]
        )
        add_combo(
            "–ë–¶:", "bz", list(rooms_by_bz.keys()), ctx, help_text=HELP_TEXTS["bz"]
        )
        add_room_field(
            "–ï–≥–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞:", "his_room", "bz", ctx, help_text=HELP_TEXTS["his_room"]
        )
        add_room_field(
            "–¢–≤–æ—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞:", "my_room", "bz", ctx, help_text=HELP_TEXTS["my_room"]
        )
        add_combo(
            "–¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏:",
            "regular",
            ["–û–±—ã—á–Ω–∞—è", "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"],
            ctx,
            help_text=HELP_TEXTS["regular"],
        )
    elif typ == "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏":
        add_name_field(ctx, HELP_TEXTS["name"])
        add_field(
            "–°—Å—ã–ª–∫–∞:", "link", ctx, builtin_clear=True, help_text=HELP_TEXTS["link"]
        )
        add_field(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:",
            "meeting_name",
            ctx,
            help_text=HELP_TEXTS["meeting_name"],
        )
        add_combo(
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏:",
            "duration",
            ["30 –º–∏–Ω—É—Ç", "1 —á–∞—Å", "1.5 —á–∞—Å–∞", "2 —á–∞—Å–∞"],
            ctx,
            help_text=HELP_TEXTS["duration"],
        )
        add_date("datetime", ctx, help_text=HELP_TEXTS["datetime"])
        add_time_range(
            "start_time", "end_time", ctx, help_text=HELP_TEXTS["start_time"]
        )
        add_field(
            "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ ‚Ññ1:",
            "conflict1",
            ctx,
            builtin_clear=True,
        )
        cb = add_checkbox("–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π", "multi_conflicts", ctx)
        add_field(
            "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ ‚Ññ2:",
            "conflict2",
            ctx,
            builtin_clear=True,
        )
        add_field(
            "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ ‚Ññ3:",
            "conflict3",
            ctx,
            builtin_clear=True,
        )
        add_field(
            "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ (–≤ —Ä–æ–¥. –ø–∞–¥–µ–∂–µ):",
            "client_name",
            ctx,
            help_text=HELP_TEXTS["client_name"],
        )
        # hide extra conflict links until checkbox checked
        ctx.field_containers["conflict2"].setVisible(False)
        ctx.labels["conflict2"].setVisible(False)
        ctx.field_containers["conflict3"].setVisible(False)
        ctx.labels["conflict3"].setVisible(False)

        def toggle_extra(val):
            vis = bool(val)
            ctx.field_containers["conflict2"].setVisible(vis)
            ctx.labels["conflict2"].setVisible(vis)
            ctx.field_containers["conflict3"].setVisible(vis)
            ctx.labels["conflict3"].setVisible(vis)

        cb.stateChanged.connect(toggle_extra)
    elif typ == "–î—Ä—É–≥–æ–µ":
        from PySide6.QtWidgets import (
            QWidget,
            QGridLayout,
            QPushButton,
            QVBoxLayout,
            QFormLayout,
            QHBoxLayout,
        )

        info_box = QGroupBox()
        info_box.setStyleSheet(
            "QGroupBox { border: 2px solid gray; border-radius: 6px; margin-top: 6px; }"
        )
        info_layout = QFormLayout(info_box)
        name_container = QWidget()
        name_hl = QHBoxLayout(name_container)
        name_hl.setContentsMargins(0, 0, 0, 0)
        name_edit = QLineEdit()
        gender_switch = ToggleSwitch()
        name_hl.addWidget(name_edit)
        name_hl.addStretch()
        name_hl.addWidget(QLabel("–ú—É–∂—Å–∫–æ–µ"))
        name_hl.addWidget(gender_switch)
        name_hl.addWidget(QLabel("–ñ–µ–Ω—Å–∫–æ–µ"))
        ctx.fields["other_name"] = name_edit
        ctx.fields["gender"] = gender_switch
        info_layout.addRow(label_with_icon("–ò–º—è:"), name_container)
        ctx.fields_layout.addRow(info_box)

        grid_box = QGroupBox()
        grid_box.setStyleSheet(
            "QGroupBox { border: 2px solid gray; border-radius: 6px; margin-top: 6px; }"
        )
        grid_container = QWidget()
        grid = QGridLayout(grid_container)
        idx = 0
        for key in OTHER_TEMPLATES.keys():
            btn = QPushButton(key)
            btn.clicked.connect(lambda _=False, k=key: generate_other_category(ctx, k))
            setup_animation(btn, ctx)
            grid.addWidget(btn, idx // 2, idx % 2)
            idx += 1

        grid_box.setLayout(grid)
        ctx.field_containers["other_buttons"] = grid_box
        ctx.fields_layout.addRow(grid_box)
        act_box = QGroupBox()
        act_box.setStyleSheet(
            "QGroupBox { border: 2px solid gray; border-radius: 6px; margin-top: 6px; }"
        )
        act_layout = QVBoxLayout(act_box)
        act_btn = QPushButton("–ù–∞–ø–∏—Å–∞–ª–∏ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏")
        act_btn.setMinimumHeight(40)
        act_btn.clicked.connect(lambda: show_actuality_dialog(ctx))
        setup_animation(act_btn, ctx)
        act_layout.addWidget(act_btn)
        ctx.fields_layout.addRow(act_box)

        exch_box = QGroupBox()
        exch_box.setStyleSheet(
            "QGroupBox { border: 2px solid gray; border-radius: 6px; margin-top: 6px; }"
        )
        exch_layout = QVBoxLayout(exch_box)
        exch_btn = QPushButton("–ù–∞–ø–∏—Å–∞–ª–∏ –ø–æ –æ–±–º–µ–Ω—É")
        exch_btn.setMinimumHeight(40)
        exch_btn.clicked.connect(lambda: show_exchange_dialog(ctx))
        setup_animation(exch_btn, ctx)
        exch_layout.addWidget(exch_btn)
        ctx.fields_layout.addRow(exch_box)

        custom_box = QGroupBox()
        custom_box.setTitle("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã")
        custom_box.setStyleSheet(
            "QGroupBox { border: 2px solid gray; border-radius: 6px; margin-top: 6px; }"
        )
        custom_layout = QVBoxLayout(custom_box)
        custom_layout.setContentsMargins(9, 15, 9, 9)
        my_btn = QPushButton("–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã")
        my_btn.setMinimumHeight(40)
        my_btn.clicked.connect(lambda: show_user_templates_dialog(ctx))
        setup_animation(my_btn, ctx)
        custom_layout.addWidget(my_btn)
        ctx.fields_layout.addRow(custom_box)

    if "client_name" in ctx.fields:
        lab = ctx.labels.get("client_name")
        if lab:
            if typ == "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏":
                lab.setText("üßë\u200düíº –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ (–≤ —Ä–æ–¥. –ø–∞–¥–µ–∂–µ):")
            else:
                lab.setText("üßë\u200düíº –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞:")
    if "meeting_name" in ctx.fields:
        lab = ctx.labels.get("meeting_name")
        if lab:
            lab.setText("üìù –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")


def on_link_change(ctx: UIContext):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—è."""
    url_widget = ctx.fields.get("link")
    if not url_widget:
        return
    url = url_widget.text()
    date_str, time_str = parse_yandex_calendar_url(url)
    if date_str and time_str and "datetime" in ctx.fields:
        try:
            dt = datetime.strptime(date_str, "%d.%m.%Y")
            ctx.fields["datetime"].setDate(QDate(dt.year, dt.month, dt.day))
        except Exception:
            pass
        try:
            h, m = map(int, time_str.split(":"))
            h = (h + 3) % 24
            ctx.fields["start_time"].setTime(QTime(h, m))
        except Exception:
            pass


def _get_value(ctx: UIContext, name: str) -> str:
    """–í–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏."""
    widget = ctx.fields.get(name)
    if isinstance(widget, QLineEdit):
        return widget.text()
    if isinstance(widget, QComboBox):
        return widget.currentText()
    if hasattr(widget, "time"):
        return widget.time().toString("HH:mm")
    return ""


def _build_greeting(ctx: UIContext, name: str) -> tuple[str, str]:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    greeting = f"–ü—Ä–∏–≤–µ—Ç, {name}!"
    gender = "–∂"
    if ctx.ls_active and ctx.ls_saved:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø {ctx.user_name}, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"
        gender = ctx.user_gender
    elif ctx.asya_mode:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –ê—Å—è, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"
        gender = "–∂"
    return greeting, gender


def _make_time_part(start: str, end: str) -> str:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –≤—Å—Ç—Ä–µ—á–∏."""
    if start and end:
        return f", –≤ {start} ‚Äî {end}"
    if start:
        return f", –≤ {start}"
    return ""


def _generate_actualization(greeting: str, formatted: str, time_part: str, link_part: str,
                            room: str, regular: str, thanks_word: str, myself_word: str) -> str:
    """–°–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏."""
    is_regular = "—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞" if regular.lower() == "—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è" else "–≤—Å—Ç—Ä–µ—á–∞"
    share_word = "—Ä–∞–∑–æ–≤–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è" if regular.lower() == "—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è" else "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è"
    return (
        f"{greeting}\n\n"
        f"–£ —Ç–µ–±—è {formatted}{time_part} —Å–æ—Å—Ç–æ–∏—Ç—Å—è {is_regular}{link_part} –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π {room}.\n\n"
        f"–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–æ–∂–µ—à—å –ª–∏ {share_word} –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π?\n"
        f"–ë—É–¥—É –æ—á–µ–Ω—å {thanks_word}!\n\n"
        f"–ï—Å–ª–∏ —Å–º–æ–∂–µ—à—å, —Ç–æ —Å–¥–µ–ª–∞—é –≤—Å—ë {myself_word}. –¢–æ–ª—å–∫–æ –Ω–µ —É–¥–∞–ª—è–π –µ—ë –∏–∑ –≤—Å—Ç—Ä–µ—á–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å :)"
    )


def _generate_exchange(greeting: str, formatted: str, time_part: str, link_part: str,
                       his_room: str, my_room: str, regular: str,
                       thanks_word: str, myself_word: str) -> str:
    """–°–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞."""
    is_regular = "—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞" if regular.lower() == "—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è" else "–≤—Å—Ç—Ä–µ—á–∞"
    share_word = "—Ä–∞–∑–æ–≤–æ –æ–±–º–µ–Ω—è—Ç—å—Å—è" if regular.lower() == "—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è" else "–æ–±–º–µ–Ω—è—Ç—å—Å—è"
    return (
        f"{greeting}\n\n"
        f"–£ —Ç–µ–±—è {formatted}{time_part} —Å–æ—Å—Ç–æ–∏—Ç—Å—è {is_regular}{link_part} –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π {his_room}.\n\n"
        f"–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–æ–∂–µ–º –ª–∏ {share_word} –Ω–∞ {my_room}?\n"
        f"–ë—É–¥—É —Ç–µ–±–µ –æ—á–µ–Ω—å {thanks_word}!\n\n"
        f"–ï—Å–ª–∏ —Å–º–æ–∂–µ–º, —Ç–æ —è –≤—Å—ë —Å–¥–µ–ª–∞—é {myself_word} :)"
    )


def _generate_meeting(ctx: UIContext, greeting: str, formatted: str, time_part: str,
                      link_part: str, meeting_name: str, duration: str,
                      client_name: str, conflict_links: list[str],
                      thanks_word: str, myself_word: str) -> str:
    """–°–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏."""
    first_name = client_name.split()[0] if client_name else "–∫–ª–∏–µ–Ω—Ç"
    conflicts = [c for c in conflict_links if c]
    if len(conflicts) == 0:
        conflict_text = ""
        plural = False
    elif len(conflicts) == 1:
        conflict_text = f"–£ —Ç–µ–±—è –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–µ–π: {conflicts[0]}"
        plural = False
    else:
        lines = "\n".join(f"{i+1}) {c}" for i, c in enumerate(conflicts))
        conflict_text = "–£ —Ç–µ–±—è –æ–±—Ä–∞–∑—É—é—Ç—Å—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏:\n" + lines
        plural = True

    single_variants = [
        f"–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å–≤–æ—é –≤—Å—Ç—Ä–µ—á—É –∏ –±—ã—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ {first_name} –≤ —ç—Ç–æ –≤—Ä–µ–º—è?",
        f"–°–º–æ–∂–µ—à—å –ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ {first_name}?",
        f"–ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ª–æ—Ç –∏ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å—Ç—Ä–µ—á–µ {first_name}?",
        f"–ü–æ–ª—É—á–∏—Ç—Å—è –ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ {first_name}?",
        f"–î–∞–π –∑–Ω–∞—Ç—å, –µ—Å–ª–∏ —Å–º–æ–∂–µ—à—å –ø–æ–¥–≤–∏–Ω—É—Ç—å —Å–≤–æ—é –≤—Å—Ç—Ä–µ—á—É –∏ –±—ã—Ç—å —É {first_name}.",
        f"–ë—É–¥–µ—Ç —Å—É–ø–µ—Ä, –µ—Å–ª–∏ –Ω–∞–π–¥—ë—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ {first_name}.",
    ]
    multi_variants = [
        f"–°–º–æ–∂–µ—à—å –ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –∏ –±—ã—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ {first_name}?",
        f"–ï—Å—Ç—å —à–∞–Ω—Å, —á—Ç–æ —É–¥–∞—Å—Ç—Å—è —Ä–∞–∑—Ä—É–ª–∏—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å—Ç—Ä–µ—á–µ {first_name}?",
        f"–°–º–æ–∂–µ—à—å –ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è –∏ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å—Ç—Ä–µ—á–µ —É {first_name}?",
        f"–ï—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–∫–Ω–æ ‚Äî –æ—á–µ–Ω—å –≤—ã—Ä—É—á–∏—à—å, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—à—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ {first_name}.",
        f"–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–Ω–æ–≥–æ ‚Äî –Ω–æ –µ—Å–ª–∏ —É–¥–∞—Å—Ç—Å—è –≤—ã–∫—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É {first_name}, —ç—Ç–æ –±—É–¥–µ—Ç –æ–≥–æ–Ω—å.",
    ]
    conclusion = random.choice(multi_variants if plural else single_variants)
    regular_one = regular_two = ""
    if ctx.regular_meeting_enabled:
        count = ctx.regular_count.value()
        count_word = number_to_words(count)
        raz_form = plural_raz(count)
        period = ctx.regular_period.currentText().strip().lower()
        day = ctx.regular_day.currentText().strip().lower()
        plural_day = weekday_to_plural(day)
        regular_one = (
            f"–û–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ {count_word} {raz_form} –≤ {period} "
            f"–ø–æ {plural_day}."
        )
        regular_two = (
            f"–ï—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–æ–∏—Ç, –≤—Å—Ç—Ä–µ—á–∞ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è {count_word} {raz_form} "
            f"–≤ {period} –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è."
        )

    return (
        f"{greeting}\n\n"
        f"–ü–æ–¥–±–∏—Ä–∞—é –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ {client_name} ¬´{meeting_name}¬ª{link_part} –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ {duration}.\n"
        f"{regular_one}\n\n"
        f"–°–µ–π—á–∞—Å –æ–Ω–∞ —Å—Ç–æ–∏—Ç {formatted}{time_part}\n"
        f"{regular_two}\n\n"
        f"{conflict_text}\n\n"
        f"{conclusion}"
    )


def generate_message(ctx: UIContext):
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π."""
    typ = ctx.type_combo.currentText()

    start = _get_value(ctx, "start_time")
    end = _get_value(ctx, "end_time")
    time_part = _make_time_part(start, end)
    name = _get_value(ctx, "name")
    if not name or (
        (typ == "–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è" and not _get_value(ctx, "room"))
        or (typ == "–û–±–º–µ–Ω" and (not _get_value(ctx, "his_room") or not _get_value(ctx, "my_room")))
    ):
        QMessageBox.warning(ctx.window, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É")
        return
    if "datetime" not in ctx.fields:
        QMessageBox.critical(ctx.window, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏")
        return

    raw_date = ctx.fields["datetime"].date().toPython()
    formatted = format_date_ru(raw_date)
    link = _get_value(ctx, "link")
    link_part = f" ({link})" if link else ""
    greeting, gender = _build_greeting(ctx, name)
    thanks_word = "–ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–∞" if gender == "–∂" else "–ø—Ä–∏–∑–Ω–∞—Ç–µ–ª–µ–Ω"
    myself_word = "—Å–∞–º–∞" if gender == "–∂" else "—Å–∞–º"

    if typ == "–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è":
        room = _get_value(ctx, "room")
        regular = _get_value(ctx, "regular")
        msg = _generate_actualization(greeting, formatted, time_part, link_part, room, regular, thanks_word, myself_word)
    elif typ == "–û–±–º–µ–Ω":
        his_room = _get_value(ctx, "his_room")
        my_room = _get_value(ctx, "my_room")
        regular = _get_value(ctx, "regular")
        msg = _generate_exchange(greeting, formatted, time_part, link_part, his_room, my_room, regular, thanks_word, myself_word)
    elif typ == "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏":
        meeting_name = _get_value(ctx, "meeting_name")
        duration = _get_value(ctx, "duration")
        client_name = _get_value(ctx, "client_name")
        conflicts = [
            _get_value(ctx, "conflict1"),
            _get_value(ctx, "conflict2"),
            _get_value(ctx, "conflict3"),
        ]
        msg = _generate_meeting(
            ctx,
            greeting,
            formatted,
            time_part,
            link_part,
            meeting_name,
            duration,
            client_name,
            conflicts,
            thanks_word,
            myself_word,
        )
    else:
        msg = "–¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω"

    try:
        date_str = ctx.fields["datetime"].date().toString("dd.MM.yyyy")
        record = {
            "type": typ.lower(),
            "name": name,
            "date": date_str,
            "start": start,
            "end": end,
        }
        if typ == "–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è":
            record["room"] = room
        elif typ == "–û–±–º–µ–Ω":
            record["his_room"] = his_room
            record["my_room"] = my_room
        ctx.history.add_record(record)
    except Exception:
        pass

    ctx.output_text.setPlainText(msg)
    if getattr(ctx, "auto_report_enabled", False):
        result = show_auto_report_dialog(ctx)
        if result is None and getattr(ctx, "auto_copy_enabled", False):
            copy_generated_text(ctx)
    elif getattr(ctx, "auto_copy_enabled", False):
        copy_generated_text(ctx)


def generate_other_category(ctx: UIContext, category: str) -> None:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–î—Ä—É–≥–æ–µ"."""
    name_field = ctx.fields.get("other_name")
    gender_field = ctx.fields.get("gender")
    name = name_field.text().strip() if name_field else ""
    gender = "–∂"
    if isinstance(gender_field, QComboBox):
        gender = "–∂" if gender_field.currentText().startswith("–ñ") else "–º"
    elif hasattr(gender_field, "isChecked"):
        gender = "–∂" if gender_field.isChecked() else "–º"
    text = generate_from_category(category, name, gender)
    ctx.output_text.setPlainText(text)
    if getattr(ctx, "auto_copy_enabled", False):
        copy_generated_text(ctx)


def _format_short_date(date_str: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç "–î –º–µ—Å—è—Ü"."""
    try:
        from datetime import datetime
        from .utils import months

        dt = datetime.strptime(date_str, "%d.%m.%Y")
        return f"{dt.day} {months[dt.month - 1]}"
    except Exception:
        return date_str


def show_actuality_dialog(ctx: UIContext) -> None:
    """–î–∏–∞–ª–æ–≥ –ø–æ —à–∞–±–ª–æ–Ω—É "–ù–∞–ø–∏—Å–∞–ª–∏ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏"."""
    from PySide6.QtWidgets import (
        QDialog,
        QVBoxLayout,
        QFormLayout,
        QLineEdit,
        QRadioButton,
        QButtonGroup,
        QWidget,
        QHBoxLayout,
        QPushButton,
    )

    dlg = QDialog(ctx.window)
    dlg.setWindowTitle("–ù–∞–ø–∏—Å–∞–ª–∏ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏")
    layout = QVBoxLayout(dlg)
    form = QFormLayout()

    login_edit = QLineEdit()
    date_edit = QLineEdit()
    time_edit = QLineEdit()
    room_edit = QLineEdit()
    link_edit = QLineEdit()
    tg_edit = QLineEdit()
    channel_group = QButtonGroup(dlg)
    asya_radio = QRadioButton("–ê—Å—è")
    ls_radio = QRadioButton("–õ–°")
    asya_radio.setChecked(True)
    channel_group.addButton(asya_radio)
    channel_group.addButton(ls_radio)
    ch_widget = QWidget()
    ch_layout = QHBoxLayout(ch_widget)
    ch_layout.setContentsMargins(0, 0, 0, 0)
    ch_layout.addWidget(asya_radio)
    ch_layout.addWidget(ls_radio)
    recent_combo = QComboBox()

    recs = ctx.history.get_recent_by_type("–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è")
    if recs:
        recent_combo.addItem("–í—ã–±—Ä–∞—Ç—å...", {})
        for r in recs:
            label = f"{r.get('room','')}, {_format_short_date(r['date'])} {r.get('start','')}\u2013{r.get('end','')}"
            recent_combo.addItem(label, r)
    else:
        recent_combo.addItem("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á", {})

    def on_recent(idx: int) -> None:
        data = recent_combo.itemData(idx)
        if not isinstance(data, dict):
            return
        date_edit.setText(_format_short_date(data.get("date", "")))
        time_edit.setText(f"{data.get('start','')} ‚Äî {data.get('end','')}")
        room_edit.setText(data.get("room", ""))

    recent_combo.currentIndexChanged.connect(on_recent)

    form.addRow("–õ–æ–≥–∏–Ω:", login_edit)
    form.addRow("–î–∞—Ç–∞:", date_edit)
    form.addRow("–í—Ä–µ–º—è:", time_edit)
    form.addRow("–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞:", room_edit)
    form.addRow("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:", link_edit)
    form.addRow("–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram:", tg_edit)
    form.addRow("–ö–∞–Ω–∞–ª:", ch_widget)
    form.addRow("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:", recent_combo)
    layout.addLayout(form)

    ok_btn = QPushButton("OK")
    ok_btn.clicked.connect(dlg.accept)
    layout.addWidget(ok_btn)

    if dlg.exec() != QDialog.Accepted:
        return

    date = date_edit.text().strip()
    time = time_edit.text().strip()
    room = room_edit.text().strip()
    login = login_edit.text().strip()
    link = link_edit.text().strip()
    tg = tg_edit.text().strip()
    ch = "–ê—Å—è" if asya_radio.isChecked() else "–õ–°"
    pref = "–£—Ç–æ—á–Ω—è—é —Å –ê—Å–∏" if ch == "–ê—Å—è" else "–£—Ç–æ—á–Ω—è—é —Å –õ–°"
    text = (
        f"{pref} –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ [–≤—Å—Ç—Ä–µ—á–µ]({link}), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–π–¥—ë—Ç {date} "
        f"–≤ {time} –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π **{room}** —É @{login}"
        f"\n[–ú–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram]({tg}).\n–û—Ç–≤–µ—Ç:"
    )
    ctx.output_text.setPlainText(text)
    if getattr(ctx, "auto_copy_enabled", False):
        copy_generated_text(ctx)


def show_exchange_dialog(ctx: UIContext) -> None:
    """–î–∏–∞–ª–æ–≥ –ø–æ —à–∞–±–ª–æ–Ω—É "–ù–∞–ø–∏—Å–∞–ª–∏ –ø–æ –æ–±–º–µ–Ω—É"."""
    from PySide6.QtWidgets import (
        QDialog,
        QVBoxLayout,
        QFormLayout,
        QLineEdit,
        QRadioButton,
        QButtonGroup,
        QWidget,
        QHBoxLayout,
        QPushButton,
    )

    dlg = QDialog(ctx.window)
    dlg.setWindowTitle("–ù–∞–ø–∏—Å–∞–ª–∏ –ø–æ –æ–±–º–µ–Ω—É")
    layout = QVBoxLayout(dlg)
    form = QFormLayout()

    login_edit = QLineEdit()
    date_edit = QLineEdit()
    time_edit = QLineEdit()
    his_room_edit = QLineEdit()
    my_room_edit = QLineEdit()
    link_edit = QLineEdit()
    tg_edit = QLineEdit()
    channel_group = QButtonGroup(dlg)
    asya_radio = QRadioButton("–ê—Å—è")
    ls_radio = QRadioButton("–õ–°")
    asya_radio.setChecked(True)
    channel_group.addButton(asya_radio)
    channel_group.addButton(ls_radio)
    ch_widget = QWidget()
    ch_layout = QHBoxLayout(ch_widget)
    ch_layout.setContentsMargins(0, 0, 0, 0)
    ch_layout.addWidget(asya_radio)
    ch_layout.addWidget(ls_radio)
    recent_combo = QComboBox()

    recs = ctx.history.get_recent_by_type("–æ–±–º–µ–Ω")
    if recs:
        recent_combo.addItem("–í—ã–±—Ä–∞—Ç—å...", {})
        for r in recs:
            label = (
                f"{r.get('his_room','')} \u2192 {r.get('my_room','')}, "
                f"{_format_short_date(r['date'])} {r.get('start','')}\u2013{r.get('end','')}"
            )
            recent_combo.addItem(label, r)
    else:
        recent_combo.addItem("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á", {})

    def on_recent(idx: int) -> None:
        data = recent_combo.itemData(idx)
        if not isinstance(data, dict):
            return
        date_edit.setText(_format_short_date(data.get("date", "")))
        time_edit.setText(f"{data.get('start','')} ‚Äî {data.get('end','')}")
        his_room_edit.setText(data.get("his_room", ""))
        my_room_edit.setText(data.get("my_room", ""))

    recent_combo.currentIndexChanged.connect(on_recent)

    form.addRow("–õ–æ–≥–∏–Ω:", login_edit)
    form.addRow("–î–∞—Ç–∞:", date_edit)
    form.addRow("–í—Ä–µ–º—è:", time_edit)
    form.addRow("–ï–≥–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞:", his_room_edit)
    form.addRow("–¢–≤–æ—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞:", my_room_edit)
    form.addRow("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:", link_edit)
    form.addRow("–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram:", tg_edit)
    form.addRow("–ö–∞–Ω–∞–ª:", ch_widget)
    form.addRow("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:", recent_combo)
    layout.addLayout(form)

    ok_btn = QPushButton("OK")
    ok_btn.clicked.connect(dlg.accept)
    layout.addWidget(ok_btn)

    if dlg.exec() != QDialog.Accepted:
        return

    date = date_edit.text().strip()
    time = time_edit.text().strip()
    his_room = his_room_edit.text().strip()
    my_room = my_room_edit.text().strip()
    login = login_edit.text().strip()
    link = link_edit.text().strip()
    tg = tg_edit.text().strip()
    ch = "–ê—Å—è" if asya_radio.isChecked() else "–õ–°"
    pref = "–ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–±–º–µ–Ω —Å –ê—Å–∏" if ch == "–ê—Å—è" else "–ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–±–º–µ–Ω —Å –õ–°"
    text = (
        f"{pref} –ø–æ [–≤—Å—Ç—Ä–µ—á–µ]({link}), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–π–¥—ë—Ç {date}, –≤ {time} "
        f"–≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π **{his_room}** –Ω–∞ —Å–≤–æ—é **{my_room}**. –ü–∏—à—É @{login}"
        f"\n[–ú–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram]({tg}).\n–û—Ç–≤–µ—Ç: "
    )
    ctx.output_text.setPlainText(text)
    if getattr(ctx, "auto_copy_enabled", False):
        copy_generated_text(ctx)


def show_auto_report_dialog(ctx: UIContext) -> bool | None:
    """–î–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ``True`` –µ—Å–ª–∏ –æ—Ç—á—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, ``False`` –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏ ``None``
    –µ—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ (—Ç–∏–ø —à–∞–±–ª–æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è).
    """
    from PySide6.QtWidgets import (
        QDialog,
        QVBoxLayout,
        QFormLayout,
        QLineEdit,
        QPushButton,
    )

    typ = ctx.type_combo.currentText()
    if typ not in {"–û–±–º–µ–Ω", "–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è"}:
        return None

    dlg = QDialog(ctx.window)
    dlg.setWindowTitle("–ê–≤—Ç–æ-–æ—Ç—á—ë—Ç")
    layout = QVBoxLayout(dlg)
    form = QFormLayout()

    login_edit = QLineEdit()
    link_edit = QLineEdit()
    tg_edit = QLineEdit()

    form.addRow("–õ–æ–≥–∏–Ω:", login_edit)
    form.addRow("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:", link_edit)
    form.addRow("Telegram:", tg_edit)
    layout.addLayout(form)

    ok_btn = QPushButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    ok_btn.clicked.connect(dlg.accept)
    layout.addWidget(ok_btn)

    if dlg.exec() != QDialog.Accepted:
        return False

    login = login_edit.text().strip()
    link = link_edit.text().strip()
    tg = tg_edit.text().strip()

    date = (
        ctx.fields["datetime"].date().toString("dd.MM.yyyy")
        if "datetime" in ctx.fields
        else ""
    )
    start = (
        ctx.fields["start_time"].time().toString("HH:mm")
        if "start_time" in ctx.fields
        else ""
    )
    end = (
        ctx.fields["end_time"].time().toString("HH:mm")
        if "end_time" in ctx.fields
        else ""
    )
    time = f"{start} ‚Äî {end}" if start and end else start

    if typ == "–û–±–º–µ–Ω":
        his_room = ctx.fields.get("his_room")
        my_room = ctx.fields.get("my_room")
        his_room_val = (
            his_room.currentText()
            if hasattr(his_room, "currentText")
            else getattr(his_room, "text", lambda: "")()
        )
        my_room_val = (
            my_room.currentText()
            if hasattr(my_room, "currentText")
            else getattr(my_room, "text", lambda: "")()
        )
        text = (
            f"–ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–±–º–µ–Ω –ø–æ [–≤—Å—Ç—Ä–µ—á–µ]({link}), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–π–¥—ë—Ç {date}, –≤ {time} "
            f"–≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π **{his_room_val}** –Ω–∞ —Å–≤–æ—é **{my_room_val}**. –ü–∏—à—É @{login}\n"
            f"[–ú–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram]({tg}).\n–û—Ç–≤–µ—Ç: "
        )
    else:  # –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è
        room = ctx.fields.get("room")
        room_val = (
            room.currentText()
            if hasattr(room, "currentText")
            else getattr(room, "text", lambda: "")()
        )
        text = (
            f"–£—Ç–æ—á–Ω—è—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ [–≤—Å—Ç—Ä–µ—á–µ]({link}), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–π–¥—ë—Ç {date} "
            f"–≤ {time} –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π **{room_val}** —É @{login}\n"
            f"[–ú–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram]({tg}).\n–û—Ç–≤–µ—Ç:"
        )

    if ctx.report_text:
        ctx.report_text.setPlainText(text)
        ctx.report_text.setVisible(True)
    if getattr(ctx, "auto_copy_enabled", False):
        copy_generated_text(ctx)
    return True


def add_user_template_dialog(ctx: UIContext, parent=None) -> bool:
    """–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    from PySide6.QtWidgets import (
        QDialog,
        QVBoxLayout,
        QLineEdit,
        QTextEdit,
        QLabel,
        QPushButton,
        QMessageBox,
    )

    dlg = QDialog(parent or ctx.window)
    dlg.setWindowTitle("–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
    layout = QVBoxLayout(dlg)
    layout.addWidget(QLabel("–¢–ï–ì"))
    tag_edit = QLineEdit()
    layout.addWidget(tag_edit)
    layout.addWidget(QLabel("–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞"))
    text_edit = QTextEdit()
    layout.addWidget(text_edit)
    ok_btn = QPushButton("OK")
    layout.addWidget(ok_btn)

    result = {"added": False}

    def on_ok():
        tag = tag_edit.text().strip()
        text = text_edit.toPlainText().strip()
        if not tag or not text:
            QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞")
            return
        ctx.user_templates.add_template(tag, text)
        result["added"] = True
        dlg.accept()

    ok_btn.clicked.connect(on_ok)
    dlg.exec()
    return result["added"]


def show_user_templates_dialog(ctx: UIContext) -> None:
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏."""
    from PySide6.QtWidgets import (
        QDialog,
        QVBoxLayout,
        QHBoxLayout,
        QLineEdit,
        QPushButton,
        QToolButton,
        QSizePolicy,
        QScrollArea,
        QWidget,
        QLabel,
    )

    dlg = QDialog(ctx.window)
    dlg.setWindowTitle("–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã")
    dlg.resize(600, 400)
    layout = QVBoxLayout(dlg)
    top = QHBoxLayout()
    search_edit = QLineEdit()
    search_edit.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É...")
    add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
    top.addWidget(search_edit)
    top.addStretch()
    top.addWidget(add_btn)
    layout.addLayout(top)

    scroll = QScrollArea()
    scroll.setWidgetResizable(True)
    scroll.setStyleSheet(
        "QScrollArea, QScrollArea > QWidget > QWidget { background: transparent; border: none; }"
    )
    container = QWidget()
    vbox = QVBoxLayout(container)
    scroll.setWidget(container)
    layout.addWidget(scroll)

    def refresh():
        for i in reversed(range(vbox.count())):
            item = vbox.takeAt(i)
            w = item.widget()
            if w:
                w.deleteLater()
        items = ctx.user_templates.filter_by_tag(search_edit.text().strip())
        for tpl in items:
            idx = ctx.user_templates.templates.index(tpl)
            row = QWidget()
            hl = QHBoxLayout(row)
            btn = QPushButton(tpl.get("tag", ""))
            btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
            btn.clicked.connect(
                lambda _=False, t=tpl.get("text", ""): ctx.output_text.setPlainText(t)
            )
            hl.addWidget(btn)

            info_btn = QToolButton()
            info_btn.setText("?")
            info_btn.setToolTip(tpl.get("text", ""))
            hl.addWidget(info_btn)

            hl.addStretch()
            del_btn = QToolButton()
            del_btn.setText("üóë")
            del_btn.clicked.connect(
                lambda _=False, i=idx: (
                    ctx.user_templates.remove_template(i),
                    refresh(),
                )
            )
            hl.addWidget(del_btn)
            vbox.addWidget(row)
        vbox.addStretch()

    search_edit.textChanged.connect(refresh)

    def on_add():
        if add_user_template_dialog(ctx, dlg):
            refresh()

    add_btn.clicked.connect(on_add)
    refresh()
    dlg.exec()
