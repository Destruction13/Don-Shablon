import tkinter as tk
from tkinter import ttk

from core.app_state import UIContext
from widgets import AutocompleteCombobox  # –µ—Å–ª–∏ —Ç—ã –≤—ã–Ω–µ—Å –µ–≥–æ —Ç—É–¥–∞



themes = {
    "–°–≤–µ—Ç–ª–∞—è": {
        "bg": "white",
        "fg": "black",
        "entry_bg": "white",
        "entry_fg": "black",
        "highlight": "#fff8d4"
    },
    "–¢—ë–º–Ω–∞—è": {
        "bg": "#1e1e1e",
        "fg": "#f2f2f2",
        "entry_bg": "#2e2e2e",
        "entry_fg": "#f5f5f5",
        "highlight": "#573c3c"
    },
    "–ì—ë—Ä–ª–∏-–ø–∞–∫": {
        "bg": "#fff0f5",  # –ª–∞–≤–∞–Ω–¥–∞
        "fg": "#8b008b",  # —Ç—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        "entry_bg": "#ffe4f3",
        "entry_fg": "#8b008b",
        "highlight": "#ffb6c1"  # —Å–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π
    },
    "–ö–∏–±–µ—Ä–ø–∞–Ω–∫": {
        "bg": "#0f0f1a",
        "fg": "#39ff14",  # –Ω–µ–æ–Ω–æ–≤–æ-–∑–µ–ª—ë–Ω—ã–π
        "entry_bg": "#1a1a2e",
        "entry_fg": "#00fff7",  # –Ω–µ–æ–Ω–æ–≤–æ-–≥–æ–ª—É–±–æ–π
        "highlight": "#ff00c8"  # –Ω–µ–æ–Ω–æ–≤–æ-—Ä–æ–∑–æ–≤—ã–π
    },
    "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º": {
        "bg": "#f0f0f0",
        "fg": "#222222",
        "entry_bg": "#ffffff",
        "entry_fg": "#222222",
        "highlight": "#c7ecee"
    },
    "–†–µ—Ç—Ä–æ DOS": {
        "bg": "#000000",
        "fg": "#00ff00",  # –∑–µ–ª—ë–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
        "entry_bg": "#000000",
        "entry_fg": "#00ff00",
        "highlight": "#005500"
    }
}

def apply_theme(ctx: UIContext):
    style = ttk.Style()
    theme = themes[ctx.current_theme_name]
    ctx.root.configure(bg=theme["bg"])
    if ctx.asya_popup:
        ctx.asya_popup.configure(bg=theme["bg"])
    style.configure("Custom.TFrame", background=theme["bg"])
    frame = ttk.Frame(ctx.fields_frame, style="Custom.TFrame")
    

    # –°—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    style.configure("TLabel", background=theme["bg"], foreground=theme["fg"])
    style.configure("TEntry", fieldbackground=theme["entry_bg"], foreground=theme["entry_fg"])
    style.configure("TButton", background=theme["entry_bg"], foreground=theme["entry_fg"])
    style.configure("Error.TEntry", fieldbackground=theme["highlight"], foreground=theme["fg"])
    style.configure("Error.TCombobox", fieldbackground=theme["highlight"], foreground=theme["fg"])

    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
    style.configure("Custom.TCombobox",
                    padding=3,
                    foreground=theme["entry_fg"],
                    background=theme["entry_bg"],
                    fieldbackground=theme["entry_bg"],
                    borderwidth=1,
                    relief="solid")
    
    style.configure("Custom.TButton",
        background=theme["entry_bg"],
        foreground=theme["entry_fg"],
        borderwidth=1,
        focusthickness=1,
        focuscolor=theme["highlight"])

    style.map("Custom.TButton",
        background=[("active", theme["highlight"])],
        foreground=[("active", theme["fg"])])

    # Accent style for toggle buttons
    style.configure(
        "Accent.TButton",
        background=theme["highlight"],
        foreground=theme["fg"],
        borderwidth=1,
        focusthickness=1,
        focuscolor=theme["highlight"],
    )
    style.map(
        "Accent.TButton",
        background=[("active", theme["highlight"])],
        foreground=[("active", theme["fg"])]
    )
  

    style.configure("Custom.DateEntry",
                    fieldbackground=theme["entry_bg"],
                    background=theme["entry_bg"],
                    foreground=theme["entry_fg"])
    style.configure("Custom.TFrame", background=theme["bg"])

    style.map("Custom.TCombobox",
        # –±—ã–ª–æ
        fieldbackground=[
            ("readonly", theme["entry_bg"]),
            # üëá –¥–æ–±–∞–≤–ª—è–µ–º
            ("!readonly", theme["entry_bg"])
        ],
        background=[
            ("readonly", theme["entry_bg"]),
            ("!readonly", theme["entry_bg"])
        ],
        foreground=[
            ("readonly", theme["entry_fg"]),
            ("!readonly", theme["entry_fg"])
        ],
        selectforeground=[("readonly", theme["entry_fg"])],
        selectbackground=[("readonly", theme["entry_bg"])]
    )




    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∫–∞–∂–¥–æ–º—É –≤–∏–¥–∂–µ—Ç—É
    for widget in ctx.input_fields:
        if not widget.winfo_exists():
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º—ë—Ä—Ç–≤—ã–µ –≤–∏–¥–∂–µ—Ç—ã

        try:
            widget.configure(background=theme["entry_bg"], foreground=theme["entry_fg"])
        except:
            pass

        # –¢–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ widget
        if isinstance(widget, AutocompleteCombobox):
            widget.configure(style="Custom.TCombobox")
        elif isinstance(widget, ttk.Combobox):
            widget.configure(style="Custom.TCombobox")
        elif widget.winfo_class() == "DateEntry":
            widget.configure(style="Custom.DateEntry")
        elif isinstance(widget, ttk.Frame):
            widget.configure(style="Custom.TFrame")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ output_text
    ctx.output_text.configure(bg=theme["entry_bg"],
                          fg=theme["entry_fg"],
                          insertbackground=theme["fg"])
    
def apply_theme_from_dropdown(*_, ctx: UIContext):
    ctx.current_theme_name = ctx.selected_theme.get()
    apply_theme(ctx)
